/*This code loads the Iris dataset, splits it into training and testing sets, and trains three different models: Logistic Regression,
Decision Tree, and Random Forest. After training the models, it makes predictions on the test set and evaluates each model using accuracy,
precision, recall, and F1-score. A function is defined to calculate and print these evaluation metrics, providing a comparison of the
models' performance. The results help determine which model performs best for the given classification problem.*/

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the models
log_reg = LogisticRegression(max_iter=200)
dec_tree = DecisionTreeClassifier()
rand_forest = RandomForestClassifier()

# Train the models
log_reg.fit(X_train, y_train)
dec_tree.fit(X_train, y_train)
rand_forest.fit(X_train, y_train)

# Make predictions
y_pred_log_reg = log_reg.predict(X_test)
y_pred_dec_tree = dec_tree.predict(X_test)
y_pred_rand_forest = rand_forest.predict(X_test)

# Define a function to calculate and print evaluation metrics
def evaluate_model(name, y_true, y_pred):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='weighted')
    recall = recall_score(y_true, y_pred, average='weighted')
    f1 = f1_score(y_true, y_pred, average='weighted')
    
    print(f"Model: {name}")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print("-" * 30)

# Evaluate the models
evaluate_model("Logistic Regression", y_test, y_pred_log_reg)
evaluate_model("Decision Tree", y_test, y_pred_dec_tree)
evaluate_model("Random Forest", y_test, y_pred_rand_forest)
